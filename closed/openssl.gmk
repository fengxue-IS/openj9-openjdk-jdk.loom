# ===========================================================================
# (c) Copyright IBM Corp. 2018, 2022 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

# spec.gmk is generated by configure and contains definitions used in this makefile

ifeq (,$(wildcard $(SPEC)))
  $(error OpenSSL.gmk needs SPEC set to a proper spec.gmk)
endif

include $(SPEC)

ifeq ($(OPENJDK_TARGET_OS), windows)
  # Special setup required for Windows:
  # - OpenSSL generates an nmake-style makefile so we must use nmake
  OPENSSL_MAKE := nmake
  # - CONFIGURE_INSIST bypasses the requirement that perl use Windows-style paths (with backslashes)
  # - LIB cannot have the surrounding double-quotes provided by custom-spec.gmk
  # - PERL must be a Windows-style path that will be usable by nmake
  # - MAKEFLAGS uses unix-style options (with a dash) which won't be understood by nmake
  OPENSSL_SETUP := export \
		CONFIGURE_INSIST=true \
		LIB='$(subst ",,$(LIB))' \
		PERL='$(shell $(PATHTOOL) -m $(PERL))' \
	&& unset MAKEFLAGS \
	&&
else
  OPENSSL_MAKE := $(MAKE)
  OPENSSL_SETUP :=
endif

# Identify the desired openssl target configuration.
OPENSSL_TARGET :=
ifeq ($(OPENJDK_TARGET_OS), aix)
  OPENSSL_TARGET := aix64-cc
else ifeq ($(OPENJDK_TARGET_OS), linux)
  ifneq (,$(filter aarch64 ppc64le x86_64, $(OPENJDK_TARGET_CPU)))
    OPENSSL_TARGET := linux-$(OPENJDK_TARGET_CPU)
  else ifneq (,$(filter riscv64 s390x, $(OPENJDK_TARGET_CPU)))
    OPENSSL_TARGET := linux64-$(OPENJDK_TARGET_CPU)
  endif
else ifeq ($(OPENJDK_TARGET_OS), macosx)
  ifneq (,$(filter arm64 x86_64, $(OPENJDK_TARGET_CPU)))
    OPENSSL_TARGET := darwin64-$(OPENJDK_TARGET_CPU)-cc
  else ifeq ($(OPENJDK_TARGET_CPU), aarch64)
    OPENSSL_TARGET := darwin64-arm64-cc
  endif
else ifeq ($(OPENJDK_TARGET_OS), windows)
  ifeq ($(OPENJDK_TARGET_CPU), x86_64)
    OPENSSL_TARGET := VC-WIN64A
  else
    OPENSSL_TARGET := VC-WIN32
  endif
endif # OPENJDK_TARGET_OS

ifeq (,$(OPENSSL_TARGET))
  $(error Unsupported platform $(OPENJDK_TARGET_OS)-$(OPENJDK_TARGET_CPU))
endif # OPENSSL_TARGET

build_openssl :
ifeq ($(BUILD_OPENSSL), yes)
	@$(ECHO) Compiling OpenSSL in $(OPENSSL_DIR) for $(OPENSSL_TARGET)
	( $(OPENSSL_SETUP) $(CD) $(OPENSSL_DIR) && ./Configure $(OPENSSL_TARGET) shared && $(OPENSSL_MAKE) )
endif # BUILD_OPENSSL

.PHONY : build_openssl
